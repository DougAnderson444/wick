use thiserror::Error;

/// The RPC Error type.
#[derive(Error, Debug)]
pub enum RpcError {
  /// Error during the parsing of an IP address and port.
  #[error(transparent)]
  AddrParseError(#[from] std::net::AddrParseError),
  /// Upstream error from Tonic.
  #[error(transparent)]
  TransportError(#[from] tonic::transport::Error),

  /// Internal Error.
  #[error("Internal Error: {0}")]
  InternalError(String),

  /// Upstream Error from [vino_entity].
  #[error(transparent)]
  EntityError(#[from] vino_entity::Error),

  /// Invalid [crate::rpc::component::ComponentKind].
  #[error("Invalid component kind {0}")]
  InvalidComponentKind(i32),

  /// Error used by providers.
  #[error("{0}")]
  ProviderError(String),

  /// Error generated by a provider's components.
  #[error("{0}")]
  ComponentError(String),

  /// Error sending output to channel.
  #[error("Error sending output to channel")]
  SendError,

  /// General Error.
  #[error("General error : {0}")]
  General(String),

  /// Invalid Type Signature.
  #[error("Invalid signature")]
  InvalidSignature,
}

impl RpcError {
  /// Constructor for a [Box<RpcError::General>]
  pub fn boxed<T: std::fmt::Display>(msg: T) -> Box<Self> {
    Box::new(RpcError::General(msg.to_string()))
  }
}

impl From<tokio::task::JoinError> for RpcError {
  fn from(e: tokio::task::JoinError) -> Self {
    RpcError::InternalError(format!("Tokio Error: {}", e))
  }
}

impl From<std::io::Error> for RpcError {
  fn from(e: std::io::Error) -> Self {
    RpcError::InternalError(format!("IO Error: {}", e))
  }
}

impl From<vino_provider::native::Error> for Box<RpcError> {
  fn from(e: vino_provider::native::Error) -> Self {
    Box::new(RpcError::ProviderError(e.to_string()))
  }
}

impl From<Box<vino_provider::native::Error>> for Box<RpcError> {
  fn from(e: Box<vino_provider::native::Error>) -> Self {
    Box::new(RpcError::ProviderError(e.to_string()))
  }
}

impl From<Box<vino_provider::native::error::NativeComponentError>> for Box<RpcError> {
  fn from(e: Box<vino_provider::native::error::NativeComponentError>) -> Self {
    Box::new(RpcError::ProviderError(e.to_string()))
  }
}

impl From<Box<dyn std::error::Error + Send + Sync>> for RpcError {
  fn from(e: Box<dyn std::error::Error + Send + Sync>) -> Self {
    RpcError::ProviderError(e.to_string())
  }
}

impl From<vino_entity::Error> for Box<RpcError> {
  fn from(e: vino_entity::Error) -> Self {
    Box::new(RpcError::EntityError(e))
  }
}

impl From<&str> for RpcError {
  fn from(e: &str) -> Self {
    RpcError::General(e.to_owned())
  }
}

impl From<String> for RpcError {
  fn from(e: String) -> Self {
    RpcError::General(e)
  }
}
