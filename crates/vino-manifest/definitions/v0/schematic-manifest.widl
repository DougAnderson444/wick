
"A definition for an individual Vino schematic"
type SchematicManifest {
  "Schematic name"
  name: string @required,

  "A list of external components"
  external: [ExternalComponentDefinition],

  "A list of providers and component collections"
  providers: [ProviderDefinition],

  "A map from component reference to its target"
  components: {string: ComponentDefinition},

  "A list of connections from component to component"
  connections: [ConnectionDefinition],

  "A map of constraints and values that limit where this schematic can run"
  constraints: {string: string},
}

"An external component definition"
type ExternalComponentDefinition {
  "An alias to use for this component (local to this manifest only)"
  alias: string?,

  "The location reference (i.e. URL or file path)"
  reference: string @required,

  "A public key to verify the retrieved component's validity"
  key: string,
}

"A provider definition"
type ProviderDefinition {
  "The namespace to reference the provider's components on"
  namespace: string,

  "The kind/type of the provider"
  kind: ProviderKind,

  "The reference/location of the provider"
  reference: string,

  "Data or configuration to pass to the provider initialization"
  data: {string: string},
}

"Kind of provider,"
enum ProviderKind {
  "Native providers included at compile-time in a Vino host"
  Native = 0,
  "The URL for a separately managed GRPC endpoint"
  GrpcUrl = 1,
  "A WaPC WebAssembly provider"
  WaPC = 2,
  "A schematic within the same network"
  Schematic = 3,
}

"A single component definition"
type ComponentDefinition {
  "The ID of the component (i.e. the alias, key, or namespace)"
  id: string @required,

  "Unused (reserved)"
  metadata: {string:string}?,
}

"A connection between components"
type ConnectionDefinition {
  "The originating component (upstream)"
  from: ConnectionTargetDefinition @required,

  "The destination component (downstream)"
  to: ConnectionTargetDefinition @required,

  "The default value to provide in the event of an upstream Error or Exception"
  default: string?
}

"A connection target"
type ConnectionTargetDefinition {
  "The component reference"
  instance: string @required,
  "The component's port"
  port: string @required,
}
