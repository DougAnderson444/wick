# Enforce bash as the shell for consistency
SHELL := bash
# Use bash strict mode
.SHELLFLAGS := -eu -o pipefail -c
MAKEFLAGS += --warn-undefined-variables
MAKEFLAGS += --no-builtin-rules

SCHEMA_DIR := ./schemas
COMPONENTS_DIR := ./src/components
GENERATED_RS:=./src/components.rs
INTERFACE:=./interface.json

# The interface schema
INTERFACE:=./interface.json

# The type of code to generate
PROVIDER_TYPE:=native

# Get list of WIDL files in SCHEMA_DIR
SCHEMAS=$(wildcard ${SCHEMA_DIR}/*.widl)
# Name of the package from Cargo.toml
CRATE_NAME:=$(shell tomlq -f Cargo.toml package.name)

# Files to clean up on make clean
CLEAN_FILES :=  $(GENERATED_RS) $(INTERFACE)

# Get component names from the interface definition JSON
COMPONENT_NAMES := $(shell cat $(INTERFACE) 2>/dev/null | jq -r '.components[].name')

# Translate a list of component names to $COMPONENTS_DIR/file.rs (transposing hyphens to underscores)
GENERATED_COMPONENTS := $(patsubst %,$(COMPONENTS_DIR)/%.rs,$(subst -,_,$(COMPONENT_NAMES)))


.PHONY: all
all: build

# Defines rules like the following for each schema found :
# src/components/my_component.rs: interface.json /src/components
define COMPONENT_GEN
$(COMPONENTS_DIR)/$(subst -,_,$(1)).rs: $(INTERFACE) $(COMPONENTS_DIR)
	vino-codegen rust component $(INTERFACE) $(1) --type $(PROVIDER_TYPE) -o $$@
endef

# Call the above rule generator for each schema file
$(foreach name,$(COMPONENT_NAMES),$(eval $(call COMPONENT_GEN,$(name))))

$(COMPONENTS_DIR):
	@mkdir $@

$(INTERFACE): $(SCHEMAS)
	vino-codegen json interface "$(CRATE_NAME)" $(SCHEMA_DIR) -f -o $@

$(COMPONENTS_DIR)/__multi__.rs: $(INTERFACE)
	vino-codegen rust component $(INTERFACE) __multi__ --type $(PROVIDER_TYPE) -o $(COMPONENTS_DIR)/__multi__.rs

$(GENERATED_RS): $(INTERFACE)
	vino-codegen rust integration $< --type $(PROVIDER_TYPE) -f -o $@

.PHONY: codegen
codegen: ${GENERATED_COMPONENTS}  $(COMPONENTS_DIR)/__multi__.rs $(GENERATED_RS)
	@cargo fmt

.PHONY: build
build: codegen $(wildcard ./src/*.rs)
	@cargo build --release

.PHONY: clean
clean:
	@rm -f $(CLEAN_FILES)

.PHONY: doc
doc:

.PHONY: test
test: codegen
	@cargo test