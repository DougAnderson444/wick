# Enforce bash as the shell for consistency
SHELL := bash
# Use bash strict mode
.SHELLFLAGS := -eu -o pipefail -c
MAKEFLAGS += --warn-undefined-variables
MAKEFLAGS += --no-builtin-rules

SCHEMA_DIR := ./schemas
COMPONENTS_DIR := ./src/components
GENERATED_RS:=./src/components.rs
INTERFACE:=./interface.json

# The interface schema
INTERFACE:=./interface.json

# The type of code to generate
PROVIDER_TYPE:=native

# Get list of WIDL files in SCHEMA_DIR
SCHEMAS=$(wildcard ${SCHEMA_DIR}/**/*.widl)
# Name of the package from Cargo.toml
CRATE_NAME:=$(shell tomlq -f Cargo.toml package.name)

# Files to clean up on make clean
CLEAN_FILES :=  $(GENERATED_RS) $(INTERFACE)

.PHONY: all
all: build

$(COMPONENTS_DIR):
	@mkdir $@

.PHONY: components
components: $(COMPONENTS_DIR) $(INTERFACE)
	vino-codegen rust component $(INTERFACE) --all --type $(PROVIDER_TYPE) -o $<
	vino-codegen rust component $(INTERFACE) __multi__ --type $(PROVIDER_TYPE) -o $(COMPONENTS_DIR)/__multi__.rs

$(INTERFACE): $(SCHEMAS)
	vino-codegen json interface "$(CRATE_NAME)" $(SCHEMA_DIR) -f -o $@

$(GENERATED_RS): $(INTERFACE)
	vino-codegen rust integration $< --type $(PROVIDER_TYPE) -f -o $@

.PHONY: codegen
codegen: components $(GENERATED_RS)
	@cargo fmt

.PHONY: build
build: codegen $(wildcard ./src/*.rs)
	@cargo build --release

.PHONY: clean
clean:
	@rm -f $(CLEAN_FILES)

.PHONY: doc
doc:

.PHONY: test
test: codegen
	@cargo test